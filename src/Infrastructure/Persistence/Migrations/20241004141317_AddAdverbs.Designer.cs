// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241004141317_AddAdverbs")]
    partial class AddAdverbs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("RusPhrase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Exercises", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не увидишь."
                        },
                        new
                        {
                            Id = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Мы покажем?"
                        },
                        new
                        {
                            Id = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Она работала."
                        },
                        new
                        {
                            Id = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не думал."
                        },
                        new
                        {
                            Id = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Я посмотрю?"
                        });
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lessons", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            Name = "Базовая форма глагола",
                            Number = 1
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Adjectives.Adjective", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Adjectives", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cd412b7-34e5-439e-95d8-55b61db1cfa9"),
                            Text = "able"
                        },
                        new
                        {
                            Id = new Guid("8d50e8e9-c3b4-491e-ad36-1452e7fb0590"),
                            Text = "big"
                        },
                        new
                        {
                            Id = new Guid("09d933a8-b8e8-4127-97d1-3b194a3a45fb"),
                            Text = "black"
                        },
                        new
                        {
                            Id = new Guid("49d9e76c-7eb9-4f74-94d2-8d7dbf63ebfb"),
                            Text = "certain"
                        },
                        new
                        {
                            Id = new Guid("f0ad9463-7127-48d3-a731-0102fd1f7756"),
                            Text = "clear"
                        },
                        new
                        {
                            Id = new Guid("bcef7759-b7d8-4933-82ad-47edb5826296"),
                            Text = "different"
                        },
                        new
                        {
                            Id = new Guid("75b94ead-b444-4f1e-8bec-33e0d48141eb"),
                            Text = "easy"
                        },
                        new
                        {
                            Id = new Guid("4b431829-1a43-4494-89bb-ce500ca1eb61"),
                            Text = "economic"
                        },
                        new
                        {
                            Id = new Guid("95172ed1-a690-4e59-a2d5-b969f711cf7b"),
                            Text = "federal"
                        },
                        new
                        {
                            Id = new Guid("8c0c10db-9f9b-4dec-8f11-72951152f6cf"),
                            Text = "free"
                        },
                        new
                        {
                            Id = new Guid("b3e9a613-bb8e-43a0-80b0-50f74552e2e9"),
                            Text = "full"
                        },
                        new
                        {
                            Id = new Guid("592a18a7-f26f-43af-92c9-6bb16b33ac33"),
                            Text = "great"
                        },
                        new
                        {
                            Id = new Guid("61f2f73e-bfb2-435f-ac09-697b6bf5ed76"),
                            Text = "hard"
                        },
                        new
                        {
                            Id = new Guid("eaff4bab-3c7c-4050-9f89-0707b328f1dc"),
                            Text = "high"
                        },
                        new
                        {
                            Id = new Guid("001ea687-2f01-4707-9777-d643ebb7b3e8"),
                            Text = "human"
                        },
                        new
                        {
                            Id = new Guid("0f3734e6-0a3e-488e-860d-63adc8c1b54a"),
                            Text = "important"
                        },
                        new
                        {
                            Id = new Guid("c616a9b0-e5a1-4e84-82b5-f8706a1c97f0"),
                            Text = "international"
                        },
                        new
                        {
                            Id = new Guid("96028aa6-1dc7-4d38-b079-be0fc9b51d89"),
                            Text = "large"
                        },
                        new
                        {
                            Id = new Guid("86c28a12-8fa6-450f-84e8-fad454383431"),
                            Text = "late"
                        },
                        new
                        {
                            Id = new Guid("62adbba2-6052-4c06-90b3-87977b1aaa40"),
                            Text = "local"
                        },
                        new
                        {
                            Id = new Guid("12a4278f-cdbb-45d3-94f1-8f0c60baacc5"),
                            Text = "long"
                        },
                        new
                        {
                            Id = new Guid("cec6a73d-7aad-4cc0-a1d4-c502b7315c79"),
                            Text = "low"
                        },
                        new
                        {
                            Id = new Guid("fa6cc476-482f-4c12-8a38-e98b847e4a45"),
                            Text = "major"
                        },
                        new
                        {
                            Id = new Guid("ed995c14-bf43-4457-9a7d-a7a3564ee5f6"),
                            Text = "military"
                        },
                        new
                        {
                            Id = new Guid("e1c01e50-ec4c-4a89-822b-013ef61c04c2"),
                            Text = "national"
                        },
                        new
                        {
                            Id = new Guid("7a63d507-b061-42c1-b5f8-e386b5230724"),
                            Text = "new"
                        },
                        new
                        {
                            Id = new Guid("f773e2ba-0ab9-49ea-8a3f-cf90d13b0092"),
                            Text = "old"
                        },
                        new
                        {
                            Id = new Guid("8c42d1f8-d954-4f3e-ad59-69ec2728916e"),
                            Text = "other"
                        },
                        new
                        {
                            Id = new Guid("7d0e593f-15fc-4c8b-bc48-72af46277bdf"),
                            Text = "political"
                        },
                        new
                        {
                            Id = new Guid("cb511321-ac54-4017-b4ea-8b53ea4d45de"),
                            Text = "possible"
                        },
                        new
                        {
                            Id = new Guid("26d25d94-60a0-4180-bc40-e2ae17a0d32f"),
                            Text = "public"
                        },
                        new
                        {
                            Id = new Guid("8f7a4db3-1bae-4a67-9fe8-e0901444b592"),
                            Text = "real"
                        },
                        new
                        {
                            Id = new Guid("4d60b419-3040-4b89-a633-c628129d9374"),
                            Text = "recent"
                        },
                        new
                        {
                            Id = new Guid("c23d8e73-e9cc-4be1-aef7-f5b3e4e92c50"),
                            Text = "right"
                        },
                        new
                        {
                            Id = new Guid("33b401e3-28e8-4ce8-952f-8ed0c124d062"),
                            Text = "small"
                        },
                        new
                        {
                            Id = new Guid("9fff9195-bb56-4c0f-85d6-9f7ee47142c6"),
                            Text = "social"
                        },
                        new
                        {
                            Id = new Guid("3ac69980-9dfb-46b5-8805-a4ed17f28dd3"),
                            Text = "special"
                        },
                        new
                        {
                            Id = new Guid("2d43b70f-6a8a-4787-8c0a-8a3e1f14b7bf"),
                            Text = "strong"
                        },
                        new
                        {
                            Id = new Guid("53e66e87-89fd-4813-b111-c672d5af5b45"),
                            Text = "true"
                        },
                        new
                        {
                            Id = new Guid("fca7cc2a-34f1-4c02-8528-52892dc0630e"),
                            Text = "white"
                        },
                        new
                        {
                            Id = new Guid("ce5944fa-27e6-4d6f-8a08-59681108a44f"),
                            Text = "whole"
                        },
                        new
                        {
                            Id = new Guid("74df4727-1d71-466a-8dab-b1b552113f34"),
                            Text = "young"
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Adverbs.Adverb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Adverbs", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3118375-021a-4c5b-b982-8c110861e56b"),
                            Text = "again",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("952d6138-1e4b-4c2a-b501-c148951ec6ff"),
                            Text = "always",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("fe6f939d-2a3a-4ddc-af91-3352759f278e"),
                            Text = "every",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f63c6bf3-e505-41e7-a506-59aa2ef5cde0"),
                            Text = "never",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b1753526-2137-4f69-a477-d14177461043"),
                            Text = "normally",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ecbd054c-2179-45cd-9246-dda528c03808"),
                            Text = "rarely",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("84f6104b-22dd-4c7e-80ec-41e4d00fe22a"),
                            Text = "seldom",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ccec5fd1-67c3-4a74-b975-7df7b2894297"),
                            Text = "usually",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7a6db825-b1bd-4b62-a38a-3f2d8bbeaec2"),
                            Text = "literally",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("6e6bfa3e-b872-4d40-a2ee-bca8b38df735"),
                            Text = "simply",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("73558002-dae1-4454-81e1-0ac91efd8543"),
                            Text = "really",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("a1939cfc-1e06-45a7-9cde-8e8cf4615dc7"),
                            Text = "sure",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("27d9a98b-acbf-4495-ab35-53951c9a0b4b"),
                            Text = "completely",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("8a9e842b-c20e-45b4-be2d-a58e42af182e"),
                            Text = "heartily",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("1d2b9ee7-cfe2-40d1-bd95-848b278c9473"),
                            Text = "totally",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("2a7fc2c7-0538-4574-b9c8-bc34908d5362"),
                            Text = "absolutely",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("46055f33-27eb-4a2e-a0c1-9e88a2342af6"),
                            Text = "somewhat",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("421d81cd-f9ad-4b20-b5f6-246462868462"),
                            Text = "mildly",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("6785ecf8-6e16-4077-b65d-f030e25ec0f7"),
                            Text = "beautifully",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("a9cd5877-b24c-4461-a249-ba138b7a865a"),
                            Text = "generously",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("0d154711-11f1-45ce-baa7-9e5199ec7bb1"),
                            Text = "happily",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("497c17e2-cc84-4264-b899-90165b8272e0"),
                            Text = "neatly",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("5e925101-d482-4747-9604-3faf6a90a40d"),
                            Text = "patiently",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("2f5e80a3-7744-4124-8d39-46e5b1fe04b9"),
                            Text = "softly",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("1f297c5b-a8e7-44e4-b1a1-405c6d92509d"),
                            Text = "quickly",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("e1d1c0d9-c2a0-46e5-86f5-1ad64584f7fd"),
                            Text = "well",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("6980e458-ba5c-4b84-95b4-13d88a6d963e"),
                            Text = "finally",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("bc4f6294-b052-4e2e-8af0-76c09b7c8269"),
                            Text = "briskly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("5f93a2d5-a9cc-4503-9d1b-ea80f67a8840"),
                            Text = "brutally",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("06b63f96-d867-4089-a444-afdad6f686a1"),
                            Text = "cheerfully",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("b2608bc3-b018-463c-a991-eab9905e9a3c"),
                            Text = "expertly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("138d4000-8884-444f-bee3-6b6216470deb"),
                            Text = "randomly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("251b0b09-d512-4ab7-9c91-8a96aab9146c"),
                            Text = "sloppily",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("cbafdc35-f148-42e4-91b8-c83942ff57f7"),
                            Text = "uneasily",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("7ba93fa2-407b-4994-bccb-864ee3a3bacb"),
                            Text = "weirdly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("08da3304-edd0-4b51-afac-df4d9df6aadc"),
                            Text = "wholeheartedly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("afc31295-9ca9-4e89-8c60-2a3b2386fb81"),
                            Text = "wickedly",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("c0553b92-071e-40ff-a2b0-151130618165"),
                            Text = "here",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("ca4baf2b-f932-4341-bec7-6424620c2267"),
                            Text = "there",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("ff0c21ee-0c28-4267-aa0a-afac141db998"),
                            Text = "downstairs",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("99a909cb-3009-4db8-9784-799eff895f79"),
                            Text = "upstairs",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("57a34429-a06b-425e-9baf-f926908f06c3"),
                            Text = "inside",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("a4898e30-5cee-47af-8a82-930ca3ce6876"),
                            Text = "outside",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("e7e0ea1f-839f-4410-9194-372f9dbeb5ec"),
                            Text = "underground",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("caa4f524-5ab2-4513-b481-ebc398a02949"),
                            Text = "above",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("b7e195e5-e48f-4316-bfd5-937ce78018d5"),
                            Text = "back",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("27db08cb-be2e-4280-9596-9f52d45875a4"),
                            Text = "below",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("6c5732d1-b30f-4376-b455-d3a8837b6adb"),
                            Text = "out",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("47b31618-2e23-4294-8607-ad3f0fea8075"),
                            Text = "early",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("ad9f2bf6-c4fa-41e5-8ec4-67a99b368acc"),
                            Text = "first",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("42c179af-b28c-4ca5-9301-9cd84f00bb79"),
                            Text = "last",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("3dfd6253-296a-49ab-804a-241f0aeab532"),
                            Text = "later",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("07315eee-23d9-4eef-81aa-e1d83e2185a6"),
                            Text = "now",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("146ba32f-dfdf-4d6d-bfb1-fab8e3ff6b18"),
                            Text = "regularly",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("57dbb0ea-e426-4697-8d72-3db14f08def7"),
                            Text = "today",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("3959a763-5335-46a9-bae0-a32481172ecd"),
                            Text = "tonight",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("708edf03-6d6d-405e-a0c7-1137c6b322c9"),
                            Text = "noon",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("943847f3-1b60-4408-b426-e199c63feb9e"),
                            Text = "tomorrow",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("4613d83e-7a11-4429-a1e6-936b6ff7328d"),
                            Text = "yesterday",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("2d1aa07e-5472-44b7-a9ba-994f5b54dc5c"),
                            Text = "already",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("67b2f05a-a95c-4eb0-9b6d-3b03dd16e567"),
                            Text = "yet",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("792bec50-bec4-43c2-8cd9-616357017b48"),
                            Text = "immediately",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("38ea8366-d332-4576-83d1-afdc67703961"),
                            Text = "lately",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("3c740b58-f15f-4dc2-8e8f-b51c56b97e36"),
                            Text = "recently",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("96c1eab2-3c6e-4c61-ad14-c843169d7a99"),
                            Text = "soon",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("c9c178f6-425e-40ba-aa56-2e9df2189b21"),
                            Text = "almost",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("e3b0d5ef-dbbc-4a7e-b85c-dab9f7e49b83"),
                            Text = "also",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("abb47450-ac60-4f2e-977e-669994062522"),
                            Text = "enough",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("2f032241-0194-4311-b015-a4c4f7f9aa86"),
                            Text = "only",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("60e819ce-1567-4133-b355-298dee29e9f5"),
                            Text = "quite",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("f9e765ea-191e-4557-b871-c409f4da39ed"),
                            Text = "rather",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("627af486-ea38-44bd-8905-a4169104134d"),
                            Text = "so",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("84bfcd78-65f7-462e-b14d-e968b60953e9"),
                            Text = "too",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("c7b98dc0-9ee8-478a-8fbb-b65ddf996f05"),
                            Text = "very",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("08eeb1ba-1d56-4c87-ab23-f026508cd2f9"),
                            Text = "hardly",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("073df645-a63a-46e7-a527-ef018cdd9a09"),
                            Text = "just",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("bdd55547-2594-47ac-b133-dc65acd18caa"),
                            Text = "nearly",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("09b7f46c-4213-409c-92e4-92a3b54b8a74"),
                            Text = "more",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("1dcf9d91-267d-4ca4-b7f5-f1d80311d097"),
                            Text = "anymore",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("c53aa959-925f-4d15-af41-e7d164d39e44"),
                            Text = "much",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("8b4bca03-4b4f-4248-b965-2622a89a060c"),
                            Text = "some",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("5d0249b7-3a78-4d4d-b50c-7b359955a73e"),
                            Text = "lot",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("b4b603f7-325d-43c2-a46f-66c819ab46c4"),
                            Text = "no",
                            Type = 5
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Pronouns.Pronoun", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pronouns", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5e9499f-6682-4de2-bb4c-f6cf2c3e5e7f"),
                            Text = "i"
                        },
                        new
                        {
                            Id = new Guid("95280413-d92d-4907-827e-1bd3fadd5f20"),
                            Text = "you"
                        },
                        new
                        {
                            Id = new Guid("004a6a6b-bb91-4d03-bec1-ba2529fab0c0"),
                            Text = "he"
                        },
                        new
                        {
                            Id = new Guid("1a412290-7271-4385-8fc9-f08be3b0452c"),
                            Text = "she"
                        },
                        new
                        {
                            Id = new Guid("575963a0-80f7-4024-9c82-90e52aea846a"),
                            Text = "it"
                        },
                        new
                        {
                            Id = new Guid("60a86ad4-6d5f-4874-819a-61f9c200b7b1"),
                            Text = "we"
                        },
                        new
                        {
                            Id = new Guid("0bb651d1-cc92-41a5-9b24-2934db01ed07"),
                            Text = "they"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserScoreIds", "identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.Entities.Word", "Words", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ExerciseId");

                            b1.ToTable("Words", "practice");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("03e9797f-ab16-4422-bfd9-bf76ca33f436"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("c02b1a8b-0138-47d6-873b-16e084831444"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 2,
                                    Text = "will not",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("1deab725-e374-4ad7-a169-45a4e77d58f5"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 3,
                                    Text = "see.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("16738012-8d9a-4790-810e-bbf91672cdf6"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("a5915abb-95f9-425d-a054-5ee27997b634"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 2,
                                    Text = "we",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("4da38ea9-9eb1-4463-928b-5d38bea9c17b"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 3,
                                    Text = "show?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("d74bcb9b-36d6-4ec0-8cf8-b1a8be9624af"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 1,
                                    Text = "She",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("9215550e-7cfd-4e41-a946-90e09def9e39"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 2,
                                    Text = "worked?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("862f83cd-d378-410e-88d6-27b01a06a2dc"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("e86dff93-aeb8-476b-bfe0-ded0dc21e2de"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 2,
                                    Text = "didn't",
                                    Type = 13
                                },
                                new
                                {
                                    Id = new Guid("ee70e409-d59e-4c23-86eb-1f2878181e1b"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 3,
                                    Text = "think.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("ccac4b45-c615-438b-aeb4-2ec52947e9c4"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("dfd01a72-3ec6-47b1-8a40-32c3a32ad2da"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 2,
                                    Text = "I",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("37b924c3-3886-49a1-8c0a-07a718957e92"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 3,
                                    Text = "look?",
                                    Type = 16
                                });
                        });

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.ValueObjects.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ExerciseId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonExerciseIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907")
                                },
                                new
                                {
                                    Id = 2,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f")
                                },
                                new
                                {
                                    Id = 3,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f")
                                },
                                new
                                {
                                    Id = 4,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d")
                                },
                                new
                                {
                                    Id = 5,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb")
                                });
                        });

                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonScoreIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("ExerciseIds");

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
