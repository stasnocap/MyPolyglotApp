// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241004135157_AddAdjectives")]
    partial class AddAdjectives
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("RusPhrase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Exercises", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не увидишь."
                        },
                        new
                        {
                            Id = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Мы покажем?"
                        },
                        new
                        {
                            Id = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Она работала."
                        },
                        new
                        {
                            Id = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не думал."
                        },
                        new
                        {
                            Id = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Я посмотрю?"
                        });
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lessons", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            Name = "Базовая форма глагола",
                            Number = 1
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Adjectives.Adjective", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Adjectives", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cd412b7-34e5-439e-95d8-55b61db1cfa9"),
                            Text = "able"
                        },
                        new
                        {
                            Id = new Guid("8d50e8e9-c3b4-491e-ad36-1452e7fb0590"),
                            Text = "big"
                        },
                        new
                        {
                            Id = new Guid("09d933a8-b8e8-4127-97d1-3b194a3a45fb"),
                            Text = "black"
                        },
                        new
                        {
                            Id = new Guid("49d9e76c-7eb9-4f74-94d2-8d7dbf63ebfb"),
                            Text = "certain"
                        },
                        new
                        {
                            Id = new Guid("f0ad9463-7127-48d3-a731-0102fd1f7756"),
                            Text = "clear"
                        },
                        new
                        {
                            Id = new Guid("bcef7759-b7d8-4933-82ad-47edb5826296"),
                            Text = "different"
                        },
                        new
                        {
                            Id = new Guid("75b94ead-b444-4f1e-8bec-33e0d48141eb"),
                            Text = "easy"
                        },
                        new
                        {
                            Id = new Guid("4b431829-1a43-4494-89bb-ce500ca1eb61"),
                            Text = "economic"
                        },
                        new
                        {
                            Id = new Guid("95172ed1-a690-4e59-a2d5-b969f711cf7b"),
                            Text = "federal"
                        },
                        new
                        {
                            Id = new Guid("8c0c10db-9f9b-4dec-8f11-72951152f6cf"),
                            Text = "free"
                        },
                        new
                        {
                            Id = new Guid("b3e9a613-bb8e-43a0-80b0-50f74552e2e9"),
                            Text = "full"
                        },
                        new
                        {
                            Id = new Guid("592a18a7-f26f-43af-92c9-6bb16b33ac33"),
                            Text = "great"
                        },
                        new
                        {
                            Id = new Guid("61f2f73e-bfb2-435f-ac09-697b6bf5ed76"),
                            Text = "hard"
                        },
                        new
                        {
                            Id = new Guid("eaff4bab-3c7c-4050-9f89-0707b328f1dc"),
                            Text = "high"
                        },
                        new
                        {
                            Id = new Guid("001ea687-2f01-4707-9777-d643ebb7b3e8"),
                            Text = "human"
                        },
                        new
                        {
                            Id = new Guid("0f3734e6-0a3e-488e-860d-63adc8c1b54a"),
                            Text = "important"
                        },
                        new
                        {
                            Id = new Guid("c616a9b0-e5a1-4e84-82b5-f8706a1c97f0"),
                            Text = "international"
                        },
                        new
                        {
                            Id = new Guid("96028aa6-1dc7-4d38-b079-be0fc9b51d89"),
                            Text = "large"
                        },
                        new
                        {
                            Id = new Guid("86c28a12-8fa6-450f-84e8-fad454383431"),
                            Text = "late"
                        },
                        new
                        {
                            Id = new Guid("62adbba2-6052-4c06-90b3-87977b1aaa40"),
                            Text = "local"
                        },
                        new
                        {
                            Id = new Guid("12a4278f-cdbb-45d3-94f1-8f0c60baacc5"),
                            Text = "long"
                        },
                        new
                        {
                            Id = new Guid("cec6a73d-7aad-4cc0-a1d4-c502b7315c79"),
                            Text = "low"
                        },
                        new
                        {
                            Id = new Guid("fa6cc476-482f-4c12-8a38-e98b847e4a45"),
                            Text = "major"
                        },
                        new
                        {
                            Id = new Guid("ed995c14-bf43-4457-9a7d-a7a3564ee5f6"),
                            Text = "military"
                        },
                        new
                        {
                            Id = new Guid("e1c01e50-ec4c-4a89-822b-013ef61c04c2"),
                            Text = "national"
                        },
                        new
                        {
                            Id = new Guid("7a63d507-b061-42c1-b5f8-e386b5230724"),
                            Text = "new"
                        },
                        new
                        {
                            Id = new Guid("f773e2ba-0ab9-49ea-8a3f-cf90d13b0092"),
                            Text = "old"
                        },
                        new
                        {
                            Id = new Guid("8c42d1f8-d954-4f3e-ad59-69ec2728916e"),
                            Text = "other"
                        },
                        new
                        {
                            Id = new Guid("7d0e593f-15fc-4c8b-bc48-72af46277bdf"),
                            Text = "political"
                        },
                        new
                        {
                            Id = new Guid("cb511321-ac54-4017-b4ea-8b53ea4d45de"),
                            Text = "possible"
                        },
                        new
                        {
                            Id = new Guid("26d25d94-60a0-4180-bc40-e2ae17a0d32f"),
                            Text = "public"
                        },
                        new
                        {
                            Id = new Guid("8f7a4db3-1bae-4a67-9fe8-e0901444b592"),
                            Text = "real"
                        },
                        new
                        {
                            Id = new Guid("4d60b419-3040-4b89-a633-c628129d9374"),
                            Text = "recent"
                        },
                        new
                        {
                            Id = new Guid("c23d8e73-e9cc-4be1-aef7-f5b3e4e92c50"),
                            Text = "right"
                        },
                        new
                        {
                            Id = new Guid("33b401e3-28e8-4ce8-952f-8ed0c124d062"),
                            Text = "small"
                        },
                        new
                        {
                            Id = new Guid("9fff9195-bb56-4c0f-85d6-9f7ee47142c6"),
                            Text = "social"
                        },
                        new
                        {
                            Id = new Guid("3ac69980-9dfb-46b5-8805-a4ed17f28dd3"),
                            Text = "special"
                        },
                        new
                        {
                            Id = new Guid("2d43b70f-6a8a-4787-8c0a-8a3e1f14b7bf"),
                            Text = "strong"
                        },
                        new
                        {
                            Id = new Guid("53e66e87-89fd-4813-b111-c672d5af5b45"),
                            Text = "true"
                        },
                        new
                        {
                            Id = new Guid("fca7cc2a-34f1-4c02-8528-52892dc0630e"),
                            Text = "white"
                        },
                        new
                        {
                            Id = new Guid("ce5944fa-27e6-4d6f-8a08-59681108a44f"),
                            Text = "whole"
                        },
                        new
                        {
                            Id = new Guid("74df4727-1d71-466a-8dab-b1b552113f34"),
                            Text = "young"
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Pronouns.Pronoun", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pronouns", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5e9499f-6682-4de2-bb4c-f6cf2c3e5e7f"),
                            Text = "i"
                        },
                        new
                        {
                            Id = new Guid("95280413-d92d-4907-827e-1bd3fadd5f20"),
                            Text = "you"
                        },
                        new
                        {
                            Id = new Guid("004a6a6b-bb91-4d03-bec1-ba2529fab0c0"),
                            Text = "he"
                        },
                        new
                        {
                            Id = new Guid("1a412290-7271-4385-8fc9-f08be3b0452c"),
                            Text = "she"
                        },
                        new
                        {
                            Id = new Guid("575963a0-80f7-4024-9c82-90e52aea846a"),
                            Text = "it"
                        },
                        new
                        {
                            Id = new Guid("60a86ad4-6d5f-4874-819a-61f9c200b7b1"),
                            Text = "we"
                        },
                        new
                        {
                            Id = new Guid("0bb651d1-cc92-41a5-9b24-2934db01ed07"),
                            Text = "they"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserScoreIds", "identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.Entities.Word", "Words", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ExerciseId");

                            b1.ToTable("Words", "practice");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("03e9797f-ab16-4422-bfd9-bf76ca33f436"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("c02b1a8b-0138-47d6-873b-16e084831444"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 2,
                                    Text = "will not",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("1deab725-e374-4ad7-a169-45a4e77d58f5"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 3,
                                    Text = "see.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("16738012-8d9a-4790-810e-bbf91672cdf6"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("a5915abb-95f9-425d-a054-5ee27997b634"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 2,
                                    Text = "we",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("4da38ea9-9eb1-4463-928b-5d38bea9c17b"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 3,
                                    Text = "show?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("d74bcb9b-36d6-4ec0-8cf8-b1a8be9624af"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 1,
                                    Text = "She",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("9215550e-7cfd-4e41-a946-90e09def9e39"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 2,
                                    Text = "worked?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("862f83cd-d378-410e-88d6-27b01a06a2dc"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("e86dff93-aeb8-476b-bfe0-ded0dc21e2de"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 2,
                                    Text = "didn't",
                                    Type = 13
                                },
                                new
                                {
                                    Id = new Guid("ee70e409-d59e-4c23-86eb-1f2878181e1b"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 3,
                                    Text = "think.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("ccac4b45-c615-438b-aeb4-2ec52947e9c4"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("dfd01a72-3ec6-47b1-8a40-32c3a32ad2da"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 2,
                                    Text = "I",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("37b924c3-3886-49a1-8c0a-07a718957e92"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 3,
                                    Text = "look?",
                                    Type = 16
                                });
                        });

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.ValueObjects.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ExerciseId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonExerciseIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907")
                                },
                                new
                                {
                                    Id = 2,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f")
                                },
                                new
                                {
                                    Id = 3,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f")
                                },
                                new
                                {
                                    Id = 4,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d")
                                },
                                new
                                {
                                    Id = 5,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb")
                                });
                        });

                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonScoreIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("ExerciseIds");

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
