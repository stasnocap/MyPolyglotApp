// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241003135225_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("RusPhrase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Exercises", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не увидишь."
                        },
                        new
                        {
                            Id = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Мы покажем?"
                        },
                        new
                        {
                            Id = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Она работала."
                        },
                        new
                        {
                            Id = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не думал."
                        },
                        new
                        {
                            Id = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Я посмотрю?"
                        });
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lessons", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            Name = "Базовая форма глагола",
                            Number = 1
                        });
                });

            modelBuilder.Entity("Domain.Vocabulary.Pronouns.Pronoun", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pronouns", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5e9499f-6682-4de2-bb4c-f6cf2c3e5e7f"),
                            Text = "i"
                        },
                        new
                        {
                            Id = new Guid("95280413-d92d-4907-827e-1bd3fadd5f20"),
                            Text = "you"
                        },
                        new
                        {
                            Id = new Guid("004a6a6b-bb91-4d03-bec1-ba2529fab0c0"),
                            Text = "he"
                        },
                        new
                        {
                            Id = new Guid("1a412290-7271-4385-8fc9-f08be3b0452c"),
                            Text = "she"
                        },
                        new
                        {
                            Id = new Guid("575963a0-80f7-4024-9c82-90e52aea846a"),
                            Text = "it"
                        },
                        new
                        {
                            Id = new Guid("60a86ad4-6d5f-4874-819a-61f9c200b7b1"),
                            Text = "we"
                        },
                        new
                        {
                            Id = new Guid("0bb651d1-cc92-41a5-9b24-2934db01ed07"),
                            Text = "they"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserScoreIds", "identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.Entities.Word", "Words", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ExerciseId");

                            b1.ToTable("Words", "practice");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("03e9797f-ab16-4422-bfd9-bf76ca33f436"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("c02b1a8b-0138-47d6-873b-16e084831444"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 2,
                                    Text = "will not",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("1deab725-e374-4ad7-a169-45a4e77d58f5"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 3,
                                    Text = "see.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("16738012-8d9a-4790-810e-bbf91672cdf6"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("a5915abb-95f9-425d-a054-5ee27997b634"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 2,
                                    Text = "we",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("4da38ea9-9eb1-4463-928b-5d38bea9c17b"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 3,
                                    Text = "show?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("d74bcb9b-36d6-4ec0-8cf8-b1a8be9624af"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 1,
                                    Text = "She",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("9215550e-7cfd-4e41-a946-90e09def9e39"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 2,
                                    Text = "worked?",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("862f83cd-d378-410e-88d6-27b01a06a2dc"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 1,
                                    Text = "You",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("e86dff93-aeb8-476b-bfe0-ded0dc21e2de"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 2,
                                    Text = "didn't",
                                    Type = 13
                                },
                                new
                                {
                                    Id = new Guid("ee70e409-d59e-4c23-86eb-1f2878181e1b"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 3,
                                    Text = "think.",
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("ccac4b45-c615-438b-aeb4-2ec52947e9c4"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 1,
                                    Text = "Will",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("dfd01a72-3ec6-47b1-8a40-32c3a32ad2da"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 2,
                                    Text = "I",
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("37b924c3-3886-49a1-8c0a-07a718957e92"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 3,
                                    Text = "look?",
                                    Type = 16
                                });
                        });

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.ValueObjects.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ExerciseId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonExerciseIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907")
                                },
                                new
                                {
                                    Id = 2,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f")
                                },
                                new
                                {
                                    Id = 3,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f")
                                },
                                new
                                {
                                    Id = 4,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d")
                                },
                                new
                                {
                                    Id = 5,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb")
                                });
                        });

                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonScoreIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("ExerciseIds");

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
