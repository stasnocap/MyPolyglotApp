// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241003114914_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EngPhrase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("RusPhrase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Exercises", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                            EngPhrase = "Ты не увидишь.",
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "You will not see."
                        },
                        new
                        {
                            Id = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                            EngPhrase = "Will we show?",
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Мы покажем?"
                        },
                        new
                        {
                            Id = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                            EngPhrase = "She worked.",
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Она работала."
                        },
                        new
                        {
                            Id = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                            EngPhrase = "You didn't think.",
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Ты не думал."
                        },
                        new
                        {
                            Id = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                            EngPhrase = "Will i look?",
                            LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            RusPhrase = "Я посмотрю?"
                        });
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lessons", "practice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                            Name = "Базовая форма глагола",
                            Number = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("Domain.Identity.User", b =>
                {
                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserScoreIds", "identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Domain.Practice.Exercises.Exercise", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.Entities.Word", "Words", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ExerciseId");

                            b1.ToTable("Words", "practice");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("367c462d-4ee7-4a18-a893-72f6d7f06627"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 1,
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("275afd08-1346-4b40-bebb-da9c29191564"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 2,
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("025b5bb4-c9e1-4e78-ba1c-fca0d1682c1d"),
                                    ExerciseId = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907"),
                                    Number = 3,
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("4e1ff101-6d6f-494c-9176-e7166141786a"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 1,
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("266676ca-171d-4732-bc40-f12bd6df44f0"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 2,
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("bb4b8972-c64c-4f87-a047-a04336a7f18e"),
                                    ExerciseId = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f"),
                                    Number = 3,
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("f0511203-5ae6-46cc-b5b7-c68e3b4f7057"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 1,
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("d5b8ee02-bea0-4b61-a911-d9d0a8b9d960"),
                                    ExerciseId = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f"),
                                    Number = 2,
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("5d114101-ac9f-478d-a44d-a8eb62df31f4"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 1,
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("8547f67c-ee17-4e52-be8c-0b1e36655e49"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 2,
                                    Type = 13
                                },
                                new
                                {
                                    Id = new Guid("13394798-f440-42c6-a29c-f3b0a2c3ac75"),
                                    ExerciseId = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d"),
                                    Number = 3,
                                    Type = 16
                                },
                                new
                                {
                                    Id = new Guid("b69c646d-0764-4f8b-babc-851202589f7d"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 1,
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("b0da53aa-6bd8-47c7-9d45-d52d4286f049"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 2,
                                    Type = 14
                                },
                                new
                                {
                                    Id = new Guid("b5ce28cb-d49e-4aee-a9f1-8f2fddfdfe7d"),
                                    ExerciseId = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb"),
                                    Number = 3,
                                    Type = 16
                                });
                        });

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Domain.Practice.Lessons.Lesson", b =>
                {
                    b.OwnsMany("Domain.Practice.Exercises.ValueObjects.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ExerciseId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonExerciseIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("6ed88863-0c5d-45cd-b361-3071bf62a907")
                                },
                                new
                                {
                                    Id = 2,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("ec6ea7e1-3dbb-45a7-801c-3441c6ef962f")
                                },
                                new
                                {
                                    Id = 3,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("dacb0b73-7bb2-491f-9bf6-adb1f3e2f50f")
                                },
                                new
                                {
                                    Id = 4,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("f8d8fcb2-4df3-4321-9538-fe576ef04c2d")
                                },
                                new
                                {
                                    Id = 5,
                                    LessonId = new Guid("099df6d4-f116-4b6e-8cae-96dd9f3623dd"),
                                    Value = new Guid("69dfc0ba-ac95-44bb-b412-b36b2a45f6bb")
                                });
                        });

                    b.OwnsMany("Domain.Practice.Scores.ValueObjects.ScoreId", "ScoreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ScoreId");

                            b1.HasKey("Id");

                            b1.HasIndex("LessonId");

                            b1.ToTable("LessonScoreIds", "practice");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("ExerciseIds");

                    b.Navigation("ScoreIds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
